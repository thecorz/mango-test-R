installed.packages()
install.packages('roxygen2')
library('devtools')
packrat::disable()
libary(devtools)
library(devtools)
library(roxygen2)
document()
document()
document()
devtools::run_examples()
# S3 Class generator function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
# capture extra params
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
param <- list(n=n, dist=dist, unlist(kwargs))
draws_list$parameters <- unlist(param)
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_list, "class") <- "draws"
draws_list
}
# summary method
summary.draws <- function(obj){
summary(obj$samples)
}
# testing
test <- draws(n=10, 'Normal', mean=0, sd=1)
summary(test)
devtools::use_package()
library(drawsample)
document()
devtools::run_examples()
roxygen2::roxygenise()
install.packages('usethis')
library(drawsample)
library(drawsample)
library(drawsample)
devtools::use_vignette("my-vignette")
packageVersion("devtools")
devtools::use_vignette()
library(devtools)
devtools::use_vignette()
library(testthat)
detach(testthat)
detach("package:testthat", unload=TRUE)
draws(100, 'Normal', 0, 1)
draws(100, 'Normal', mean=0, sd=1)
test <-draws(100, 'Normal', mean=0, sd=1)
summary(test)
devtools::use_testthat()
detach("package:devtools", unload=TRUE)
devtools::use_testthat()
use_testthat()
expect_equal(10, 10)
library(testthat)
expect_equal(10, 10)
expect_equal(10, 12)
expect_equal(10, 10.00001)
expect_equal(10, 10.0000000000001)
expect_equal(10, 10 + 1e-7)
expect_identical(10, 10 + 1e-7)
expect_length(draws(100, 'normal', mean=0, sd=1), 2)
expect_length(draws(100, 'normal', mean=0, sd=1), 3)
expect_length(draws(100, 'normal', mean=0, sd=1), 1)
expect_length(draws(100, 'normal', mean=0, sd=1)[1], 100)
expect_length(draws(100, 'normal', mean=0, sd=1)[[1]], 100)
expect_length(draws(100, 'normal', mean=0, sd=1)[[2]], 100)
expect_length(draws(100, 'normal', mean=0, sd=1)[[1]], 4)
library(drawsample)
