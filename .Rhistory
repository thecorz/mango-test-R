kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws, "class") <- "draw"
draws
}
draw_dist(n=1, 'Normal', mean=1, sd=1)
draw_dist(n=10, 'Normal', mean=1, sd=1)
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_vect <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_vect <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_vect <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_vect, "class") <- "draw"
draws_vect
}
draw_dist(n=10, 'Normal', mean=1, sd=1)
test <- draw_dist(n=10, 'Normal', mean=1, sd=1)
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list$parameters <- as.list(match.call())
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_vect, "class") <- "draw"
draws_vect
}
test <- draw_dist(n=10, 'Normal', mean=1, sd=1)
test <- draw_dist(n=10, 'Normal', mean=1, sd=1)
test
test <- draws(n=10, 'Normal', mean=1, sd=1)
draws_list$parameters <- as.list(match.call())
draws_list <- list()
draws_list$parameters <- as.list(match.call())
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
draws_list$parameters <- as.list(match.call())
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_vect, "class") <- "draw"
draws_vect
}
test <- draws(n=10, 'Normal', mean=1, sd=1)
attr(draws_list, "class") <- "draw"
test <- draws(n=10, 'Normal', mean=1, sd=1)
summary.draws <- function(obj){
summary(obj$)
}
summary.draws <- function(obj){
summary(obj$)
}
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
draws_list$parameters <- as.list(match.call())
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_list, "class") <- "draw"
draws_list
}
test <- draws(n=10, 'Normal', mean=1, sd=1)
test
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
draws_list$parameters <- list(n=n, dist=dist, unlist(kwargs))
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_list, "class") <- "draw"
draws_list
}
test <- draws(n=10, 'Normal', mean=1, sd=1)
test
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
draws_list$parameters <- unlist(n=n, dist=dist, unlist(kwargs))
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_list, "class") <- "draw"
draws_list
}
test <- draws(n=10, 'Normal', mean=1, sd=1)
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
draws_list$parameters <- unlist([n=n, dist=dist, unlist(kwargs)])
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_list, "class") <- "draw"
draws_list
}
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
draws_list$parameters <- unlist([n=n, dist=dist, unlist(kwargs)])
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_list, "class") <- "draw"
draws_list
}
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
param <- list(n=n, dist=dist, unlist(kwargs))
draws_list$parameters <- unlist(param)
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_list, "class") <- "draw"
draws_list
}
draws(n=10, 'Normal', mean=1, sd=1)
summary.draws <- function(obj){
summary(obj$samples)
}
test <- draws(n=10, 'Normal', mean=1, sd=1)
summary(test)
summary.draws <- function(obj){
return(summary(obj$samples))
}
summary(test)
test$samples
describe(test$samples)
fivenum(test$samples)
summary(test$samples)
summary(obj$samples)
summary.draws <- function(obj){
summary(obj$samples)
}
test <- draws(n=10, 'Normal', mean=1, sd=1)
summary(test)
test
summary.draws(test)
summary(test)
test
# Function
draws <- function(n, dist, ...) {
#' Draw a number from a given distribution
#'
#'
#' @description This function returns a given number of draws from
#' the specified distribution. The distributions can be Normal, Poisson
#' or Binomial
#'
#' @param n Numeric. The number of draws.
#' @param dist String. The distribution numbers are going to be drawn from.
#' @param ... Numeric, parameters of the distribution
#'
#' @return Returns a list of the values drawn from the distribtuion
#'
#' @examples
#' draw_dist(100, 'normal', mean = 0, sd = 1)
# integrity checks
if(n<0 || !n%%1 == 0) stop("n must be a positive integer")
dist <- tolower(dist)
if(!dist %in% c('normal', 'poisson', 'binomial')) stop("dist must be 'normal', 'poisson' or 'binomial'")
kwargs <- list(...)
names(kwargs) <- tolower(names(kwargs))
draws_list <- list()
param <- list(n=n, dist=dist, unlist(kwargs))
draws_list$parameters <- unlist(param)
if (dist == "normal"){
if(is.null(kwargs[["mean"]]) || is.null(kwargs[["sd"]])){
stop("normal distribution requires mean and sd parameters")}
draws_list$samples <- rnorm(n, mean = kwargs$mean, sd = kwargs$sd)
}
else if (dist == "poisson"){
if(is.null(kwargs[["lambda"]])){
stop("poisson distribution requires the lambda parameter")}
draws_list$samples <- rpois(n, lambda = kwargs$lambda)
}
else{
if(is.null(kwargs[["size"]] || is.null(kwargs[["prob"]]))){
stop("binomial distribution requires size and prob parameters")}
draws_list$samples <- rbinom(n, size = kwargs$size, prob = kwargs$prob)
}
attr(draws_list, "class") <- "draws"
draws_list
}
test <- draws(n=10, 'Normal', mean=1, sd=1)
test
summary(test)
test <- draws(n=10, 'Normal')
test <- draws(n=10, 'Normal', mean=0, sd=1)
summary(test)
getwd()
devtools::create(".")
devtools::create("/mangoshots")
